{"version":3,"sources":["rome-angular.js"],"names":["romeDirective","romeConfigProvider","restrict","scope","rome","romeChange","romeOptions","link","element","attrs","ctrl","$parse","this","options","angular","copy","defaults","item","hasOwnProperty","initialValue","Date","cal","oldDate","getDate","on","value","newDate","toString","$apply","$watch","newValue","oldValue","setValue","getDateString","setDefaults","$get","module","directive","$inject","provider"],"mappings":"AAOA,SAASA,cAAcC,GACrB,MAAO,CACLC,SAAU,IACVC,MAAO,CACLC,KAAM,IACNC,WAAY,IACZC,YAAa,KAEfC,KAAM,SAASJ,EAAOK,EAASC,EAAOC,EAAMC,GAM1C,GAJAC,KAAKC,QAAmD,iBAAhCZ,EAA2B,SACjDa,QAAQC,KAAKd,EAAmBe,UAAY,GAGZ,iBAAtBb,EAAiB,YAC3B,IAAK,IAAIc,KAAQd,EAAMG,YACjBH,EAAMG,YAAYY,eAAeD,KACnCL,KAAKC,QAAQI,GAAQd,EAAMG,YAAYW,SAQH,IAA9BL,KAAKC,QAAoB,eACnCD,KAAKC,QAAQM,kBAAuC,IAAfhB,EAAU,KAC7C,IAAIiB,KAAS,IAAIA,KAAKjB,EAAMC,OAGhC,IAAIiB,EAAMjB,KAAKI,EAAQ,GAAII,KAAKC,SAEhCQ,EAAIC,QAAUR,QAAQC,KAAKM,EAAIE,WAI/BF,EAAIG,GAAG,OAAQ,SAASC,GACtB,IAAIC,EAAUL,EAAIE,UAEdG,EAAQC,YAAcN,EAAIC,UAE5BnB,EAAMyB,OAAO,WACXzB,EAAMC,KAAOsB,EACbL,EAAIC,QAAUR,QAAQC,KAAKW,KAC1B,GAE8B,mBAArBvB,EAAgB,YAC1BA,EAAMyB,OAAO,WACXzB,EAAME,eACL,MAKTF,EAAM0B,OAAO,OAAQ,SAASC,EAAUC,QAEb,IAAd,GACTD,EAASH,YAAcN,EAAIC,UAE3BD,EAAIW,SAASF,GACbtB,EAAQ,GAAGiB,MAAQJ,EAAIY,gBAEU,mBAArB9B,EAAgB,YAC1BA,EAAME,gBAGT,KAQT,SAASJ,qBAEPW,KAAKsB,YAAc,SAASrB,GAC1BD,KAAKI,SAAWH,GAGlBD,KAAKuB,KAAO,WAAa,OAAOvB,MAvFlCE,QAAQsB,OAAO,eAAgB,IAE/BtB,QAAQsB,OAAO,gBACZC,UAAU,OAAQrC,eAErBA,cAAcsC,QAAU,CAAC,cAyEzBxB,QAAQsB,OAAO,gBACZG,SAAS,aAActC","file":"rome-angular.min.js","sourcesContent":["angular.module('rome-angular', []);\r\n\nangular.module('rome-angular')\r\n  .directive('rome', romeDirective);\r\n\r\nromeDirective.$inject = ['romeConfig'];\r\n\r\nfunction romeDirective(romeConfigProvider) {\r\n  return {\r\n    restrict: 'A',\r\n    scope: {\r\n      rome: '=',\r\n      romeChange: '&',\r\n      romeOptions: '='\r\n    },\r\n    link: function(scope, element, attrs, ctrl, $parse) {\r\n      // getting the default options set up via romeConfigProvider\r\n      this.options = (typeof (romeConfigProvider.defaults) == 'object') ?\r\n        angular.copy(romeConfigProvider.defaults) : {};\r\n      // getting the options defined for this element via scope.romeOptions\r\n      // they will override the options set up via romeConfigProvider\r\n      if (typeof (scope.romeOptions) == 'object') {\r\n        for (var item in scope.romeOptions) {\r\n          if (scope.romeOptions.hasOwnProperty(item)) {\r\n            this.options[item] = scope.romeOptions[item];\r\n          }\r\n        }\r\n      }\r\n      // getting the initialValue, priority being :\r\n      // 1. from options (i.e. via romeConfigProvider or via romeOptions)\r\n      // 2. from scope.rome\r\n      // 3. new Date()\r\n      if (typeof (this.options.initialValue) == typeof undefined) {\r\n        this.options.initialValue = (typeof (scope.rome) == typeof undefined) ?\r\n          new Date() : new Date(scope.rome);\r\n      }\r\n      // initializing rome\r\n      var cal = rome(element[0], this.options);\r\n      // storing the oldDate somewhere to avoid triggering changes too often\r\n      cal.oldDate = angular.copy(cal.getDate());\r\n      // catching rome updating the value\r\n      // unfortunately, value = cal.getDateString() which is not interesting for us\r\n      // we're working with javascript dates which are provided by cal.getDate()\r\n      cal.on('data', function(value) {\r\n        var newDate = cal.getDate();\r\n        // only if date changed since last time\r\n        if (newDate.toString() != cal.oldDate) {\r\n          // triggering scope update and storing oldDate for the next change\r\n          scope.$apply(function() {\r\n            scope.rome = newDate;\r\n            cal.oldDate = angular.copy(newDate);\r\n          }, true);\r\n          // triggering change function\r\n          if (typeof (scope.romeChange) == 'function') {\r\n            scope.$apply(function() {\r\n              scope.romeChange();\r\n            }, true);\r\n          }\r\n        }\r\n      });\r\n      // on angular programmatically updating rome's underlying value\r\n      scope.$watch('rome', function(newValue, oldValue) {\r\n        // only if date changed since last time\r\n        if (typeof (newValue) != typeof undefined &&\r\n          newValue.toString() != cal.oldDate) {\r\n          // updating rome object + the element value (displayed to the user)\r\n          cal.setValue(newValue);\r\n          element[0].value = cal.getDateString();\r\n          // triggering change function\r\n          if (typeof (scope.romeChange) == 'function') {\r\n            scope.romeChange();\r\n          }\r\n        }\r\n      }, true);\r\n    }\r\n  };\r\n}\r\n\nangular.module('rome-angular')\r\n  .provider('romeConfig', romeConfigProvider);\r\n\r\nfunction romeConfigProvider() {\r\n  // storing rome default options values\r\n  this.setDefaults = function(options) {\r\n    this.defaults = options;\r\n  };\r\n\r\n  this.$get = function() { return this; };\r\n}\r\n"]}