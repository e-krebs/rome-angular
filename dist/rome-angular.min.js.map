{"version":3,"sources":["rome-angular.js"],"names":["romeDirective","romeConfigProvider","restrict","scope","rome","romeChange","romeOptions","link","element","attrs","ctrl","$parse","this","options","angular","copy","defaults","item","hasOwnProperty","initialValue","Date","cal","oldDate","getDate","on","value","newDate","toString","$apply","$watch","newValue","oldValue","setValue","getDateString","setDefaults","$get","module","directive","$inject","provider"],"mappings":"AAMA,QAASA,eAAeC,GACpB,OACIC,SAAU,IACVC,OACIC,KAAM,IACNC,WAAY,IACZC,YAAa,KAEjBC,KAAM,SAAUJ,EAAOK,EAASC,EAAOC,EAAMC,GAKzC,GAHAC,KAAKC,QAAmD,gBAAhCZ,GAA2B,SAAiBa,QAAQC,KAAKd,EAAmBe,aAGlE,gBAAtBb,GAAiB,YACzB,IAAK,GAAIc,KAAQd,GAAMG,YACfH,EAAMG,YAAYY,eAAeD,KAAOL,KAAKC,QAAQI,GAAQd,EAAMG,YAAYW,GAOjD,oBAA9BL,MAAKC,QAAoB,eAAkBD,KAAKC,QAAQM,aAAuC,mBAAfhB,GAAU,KAAoB,GAAIiB,MAAS,GAAIA,MAAKjB,EAAMC,MAEtJ,IAAIiB,GAAMjB,KAAKI,EAAQ,GAAII,KAAKC,QAEhCQ,GAAIC,QAAUR,QAAQC,KAAKM,EAAIE,WAI/BF,EAAIG,GAAG,OAAQ,SAAUC,GACrB,GAAIC,GAAUL,EAAIE,SAEdG,GAAQC,YAAcN,EAAIC,UAE1BnB,EAAMyB,OAAO,WACTzB,EAAMC,KAAOsB,EACbL,EAAIC,QAAUR,QAAQC,KAAKW,KAC5B,GAE8B,kBAArBvB,GAAgB,YACxBA,EAAMyB,OAAO,WACTzB,EAAME,eACP,MAKfF,EAAM0B,OAAO,OAAQ,SAAUC,EAAUC,GAEb,mBAAd,IAA6BD,EAASH,YAAcN,EAAIC,UAE9DD,EAAIW,SAASF,GACbtB,EAAQ,GAAGiB,MAAQJ,EAAIY,gBAEU,kBAArB9B,GAAgB,YACxBA,EAAME,gBAGf,KAQf,QAASJ,sBAELW,KAAKsB,YAAc,SAAUrB,GACzBD,KAAKI,SAAWH,GAGpBD,KAAKuB,KAAO,WAAc,MAAOvB,OA/ErCE,QAAQsB,OAAO,mBACftB,QAAQsB,OAAO,gBACVC,UAAU,OAAQrC,eAEvBA,cAAcsC,SAAW,cAkEzBxB,QAAQsB,OAAO,gBACVG,SAAS,aAActC","file":"rome-angular.min.js","sourcesContent":["angular.module('rome-angular', []);\nangular.module('rome-angular')\r\n    .directive('rome', romeDirective);\r\n\r\nromeDirective.$inject = ['romeConfig'];\r\n\r\nfunction romeDirective (romeConfigProvider) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            rome: '=',\r\n            romeChange: '&',\r\n            romeOptions: '='\r\n        },\r\n        link: function (scope, element, attrs, ctrl, $parse) {\r\n            // getting the default options set up via romeConfigProvider\r\n            this.options = (typeof (romeConfigProvider.defaults) == 'object') ? angular.copy(romeConfigProvider.defaults) : {};\r\n            // getting the options defined for this element via scope.romeOptions\r\n            // they will override the options set up via romeConfigProvider\r\n            if (typeof (scope.romeOptions) == 'object') {\r\n                for (var item in scope.romeOptions) {\r\n                    if (scope.romeOptions.hasOwnProperty(item)) this.options[item] = scope.romeOptions[item];\r\n                }\r\n            }\r\n            // getting the initialValue, priority being :\r\n            // 1. from options (i.e. via romeConfigProvider or via romeOptions)\r\n            // 2. from scope.rome\r\n            // 3. new Date()\r\n            if (typeof (this.options.initialValue) == 'undefined') this.options.initialValue = (typeof (scope.rome) == 'undefined') ? new Date() : new Date(scope.rome);\r\n            // initializing rome\r\n            var cal = rome(element[0], this.options);\r\n            // storing the oldDate somewhere to avoid triggering changes too often\r\n            cal.oldDate = angular.copy(cal.getDate());\r\n            // catching rome updating the value\r\n            // unfortunately, value = cal.getDateString() which is not interesting for us\r\n            // we're working with javascript dates which are provided by cal.getDate()\r\n            cal.on('data', function (value) {\r\n                var newDate = cal.getDate();\r\n                // only if date changed since last time\r\n                if (newDate.toString() != cal.oldDate) {\r\n                    // triggering scope update and storing oldDate for the next change\r\n                    scope.$apply(function () {\r\n                        scope.rome = newDate;\r\n                        cal.oldDate = angular.copy(newDate);\r\n                    }, true);\r\n                    // triggering change function\r\n                    if (typeof (scope.romeChange) == 'function') {\r\n                        scope.$apply(function() {\r\n                            scope.romeChange();\r\n                        }, true);\r\n                    }\r\n                }\r\n            });\r\n            // on angular programmatically updating rome's underlying value\r\n            scope.$watch(\"rome\", function (newValue, oldValue) {\r\n                // only if date changed since last time\r\n                if (typeof(newValue) != 'undefined' && newValue.toString() != cal.oldDate) {\r\n                    // updating rome object + the element value (displayed to the user)\r\n                    cal.setValue(newValue);\r\n                    element[0].value = cal.getDateString();\r\n                    // triggering change function\r\n                    if (typeof (scope.romeChange) == 'function') {\r\n                        scope.romeChange();\r\n                    }\r\n                }\r\n            }, true);\r\n        }\r\n    };\r\n}\r\n\nangular.module('rome-angular')\r\n    .provider('romeConfig', romeConfigProvider);\r\n\r\nfunction romeConfigProvider() {\r\n    // storing rome default options values\r\n    this.setDefaults = function (options) {\r\n        this.defaults = options;\r\n    };\r\n\r\n    this.$get = function () { return this; };\r\n}\r\n"],"sourceRoot":"/source/"}